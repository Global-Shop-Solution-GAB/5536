Program.Sub.Preflight.Start
v.Global.sRemoteHost.Declare
v.Global.sRemoteUser.Declare
v.Global.sRemotePassword.Declare
v.Global.sRemotePort.Declare
v.Global.sRemotePath.Declare
v.Global.sLocalFile.Declare
v.Global.sFolderDir.Declare
Program.Sub.Preflight.End

Program.Sub.Main.Start
f.Intrinsic.Control.Try
	f.Intrinsic.Control.CallSub(checkCustomFolder)
	f.Intrinsic.Control.CallSub(loadSFTPSettings)
	v.Global.sFolderDir.Set("\CUSTOM\GCG_5536\FILES\")
	f.Intrinsic.Control.CallSub(logonSFTP)

	f.Intrinsic.Control.CallSub(copyFiles)
'
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.Main.End

Program.Sub.checkCustomFolder.Start
v.Local.sFolder.Declare
v.Local.bExists.Declare
f.Intrinsic.Control.Try
	f.Intrinsic.String.Build("{0}\CUSTOM\GCG_5536\", v.Caller.GlobalDir, v.Local.sFolder)
	f.Intrinsic.File.DirExists(v.Local.sFolder, v.Local.bExists)
	f.Intrinsic.Control.If(v.Local.bExists.Not)
		f.Intrinsic.File.CreateDir(v.Local.sFolder)
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.String.Build("{0}\CUSTOM\GCG_5536\FILES\", v.Caller.GlobalDir, v.Local.sFolder)
	f.Intrinsic.File.DirExists(v.Local.sFolder, v.Local.bExists)
	f.Intrinsic.Control.If(v.Local.bExists.Not)
		f.Intrinsic.File.CreateDir(v.Local.sFolder)
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.String.Build("{0}\CUSTOM\GCG_5536\LOGS\", v.Caller.GlobalDir, v.Local.sFolder)
	f.Intrinsic.File.DirExists(v.Local.sFolder, v.Local.bExists)
	f.Intrinsic.Control.If(v.Local.bExists.Not)
		f.Intrinsic.File.CreateDir(v.Local.sFolder)
	f.Intrinsic.Control.EndIf
	
	'Fixed Error Folder
	f.Intrinsic.String.Build("{0}\CUSTOM\GCG_5536\FIXED_ERRORS\", v.Caller.GlobalDir, v.Local.sFolder)
	f.Intrinsic.File.DirExists(v.Local.sFolder, v.Local.bExists)
	f.Intrinsic.Control.If(v.Local.bExists, =, false)
		f.Intrinsic.File.CreateDir(v.Local.sFolder)
	f.Intrinsic.Control.EndIf	
	
	'Backup Folder
	f.Intrinsic.String.Build("{0}\CUSTOM\GCG_5536\BACK_UP\", v.Caller.GlobalDir, v.Local.sFolder)
	f.Intrinsic.File.DirExists(v.Local.sFolder, v.Local.bExists)
	f.Intrinsic.Control.If(v.Local.bExists, =, false)
		f.Intrinsic.File.CreateDir(v.Local.sFolder)
	f.Intrinsic.Control.EndIf	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.checkCustomFolder.End

Program.Sub.ErrorMsg.Start
v.Local.sError.Declare

'Closes ODBC connection, default to connection : "con"
f.Intrinsic.Control.If(v.ODBC!con.State, =, 1)
	f.ODBC.Connection!con.Close
f.Intrinsic.Control.EndIf

'Generic Error message.
f.Intrinsic.String.Build("Project GCG_5536_SFTP_TRANSFER.g2u {0}{0}Subroutine: {1}{0}Error: {2} with Description: {3}", v.Ambient.NewLine, v.Args.CurrentSub, v.Ambient.ErrorNumber, v.Ambient.ErrorDescription, v.Local.sError)
f.Intrinsic.UI.Msgbox(v.Local.sError)
Program.Sub.ErrorMsg.End

Program.Sub.loadSFTPSettings.Start
v.Local.sTemp.Declare
f.Intrinsic.Control.Try
	f.ODBC.Connection!con.OpenCompanyConnection
		f.Data.DataTable.CreateFromSQL("sftpSettingsDT", "con", "Select * from GCG_5536_Settings")
	f.ODBC.Connection!con.Close
	
	f.Intrinsic.Control.If(v.DataTable.sftpSettingsDT.RowCount, =, 0)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.ElseIf(v.DataTable.sftpSettingsDT.RowCount, >, 1)
		f.Intrinsic.UI.Msgbox("Multiple Settings found. Please Contact Gloabl Shop for assistance.")
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	v.Local.sTemp.Set(v.DataTable.sftpSettingsDT(0).RemoteHost!FieldValTrim)
	f.Intrinsic.String.WeakDecryption(v.Local.sTemp, v.Global.sRemoteHost)

	v.Local.sTemp.Set(v.DataTable.sftpSettingsDT(0).RemoteUser!FieldValTrim)
	f.Intrinsic.String.WeakDecryption(v.Local.sTemp, v.Global.sRemoteUser)

	v.Local.sTemp.Set(v.DataTable.sftpSettingsDT(0).RemotePassword!FieldValTrim)
	f.Intrinsic.String.WeakDecryption(v.Local.sTemp, v.Global.sRemotePassword)
	
	v.Local.sTemp.Set(v.DataTable.sftpSettingsDT(0).RemotePort!FieldValTrim)
	f.Intrinsic.String.WeakDecryption(v.Local.sTemp, v.Global.sRemotePort)
	
	v.Local.sTemp.Set(v.DataTable.sftpSettingsDT(0).RemotePath!FieldValTrim)
	f.Intrinsic.String.WeakDecryption(v.Local.sTemp, v.Global.sRemotePath)

	f.Data.DataTable.Close("sftpSettingsDT")
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.loadSFTPSettings.End

Program.Sub.logonSFTP.Start
f.Intrinsic.Control.Try
	'should be a hardcoded tempfile path just so you can use to quickly connect, download and logoff the SFTP, just delete the temp files you are done uploading the ar batch. NCE is overwriting the files in the SFTP site every time and this only runs once per day.
	'v.Global.sLocalFile.Declare(String, "\\gss2k19rnd\gcg\SFF\")
	f.Intrinsic.String.Build("{0}{1}", v.Caller.GlobalDir, v.Global.sFolderDir, v.Global.sLocalFile)
	
	'you have to create this sub in your script.
	F.Intrinsic.Control.AddEventHandler("SFTPDirList","Listdir")

	'logon credentials.
	f.Communication.SFTP.SetProperty("SSHAcceptServerAuthentication","true")
	f.Communication.SFTP.SetProperty("remoteHost", v.Global.sRemoteHost.Trim)
	f.Communication.SFTP.SetProperty("User", v.Global.sRemoteUser.Trim)
	f.Communication.SFTP.SetProperty("Password", v.Global.sRemotePassword.Trim)
	f.Communication.SFTP.SetProperty("remotePort", v.Global.sRemotePort)
	f.Communication.SFTP.Logon
	f.Communication.SFTP.SetProperty("RemotePath", v.Global.sRemotePath)

	'this will fire the event handler sub ListDir for each file listed in the shares/nce folder. 
	F.Communication.SFTP.ListDirectory
	
'	v.Global.sFolderDir.Set("\CUSTOM\GCG_5536\BACK_UP\")
'	f.Intrinsic.String.Build("{0}{1}", v.Caller.GlobalDir, v.Global.sFolderDir, v.Global.sLocalFile)
'	F.Communication.SFTP.ListDirectory
	
	f.Communication.SFTP.Logoff	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry

Program.Sub.logonSFTP.End

Program.Sub.Listdir.Start
v.Local.stemp.Declare(String)
f.Intrinsic.Control.Try
	'this sub is fired for each file listed in the directory.  I would only download if filename = mwardet.csv or cvspb.csv. 
	f.Intrinsic.Control.if(v.Args.filename.UCase,=,"MWARDET.CSV","OR",v.Args.filename.UCase,=,"CVSPB.CSV")
	
		f.Intrinsic.String.Build("{0}{1}",v.Global.sLocalFile,v.Args.filename,v.Local.stemp)
		f.Communication.SFTP.SetProperty("RemoteFile",v.Args.filename)
		f.Communication.SFTP.SetProperty("LocalFile",v.Local.stemp)
		f.Communication.SFTP.SetProperty("TransferMode",2)
		f.Communication.SFTP.SetProperty("Overwrite", true)
		f.Communication.SFTP.Download
	
	f.Intrinsic.Control.EndIf
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.Listdir.End

Program.Sub.copyFiles.Start
v.Local.sFolderFiles.Declare
v.Local.sFolderBackUp.Declare
v.Local.sFilePath.Declare
v.Local.sBackUpPath.Declare
v.Local.sFileList.Declare
v.Local.sFiles.Declare
v.Local.iCnt.Declare
f.Intrinsic.Control.Try
	f.Intrinsic.String.Build("{0}\CUSTOM\GCG_5536\FILES\", v.Caller.GlobalDir, v.Local.sFolderFiles)
	f.Intrinsic.String.Build("{0}\CUSTOM\GCG_5536\BACK_UP\", v.Caller.GlobalDir, v.Local.sFolderBackUp)
	
	f.Intrinsic.File.GetFileList(v.Local.sFolderFiles, v.Local.sFileList)
	f.Intrinsic.String.Split(v.Local.sFileList, ":", v.Local.sFiles)
	f.Intrinsic.Control.For(v.Local.iCnt, 0, v.Local.sFiles.UBound, 1)
		f.Intrinsic.String.Build("{0}{1}", v.Local.sFolderFiles, v.Local.sFiles(v.Local.iCnt), v.Local.sFilePath)
		f.Intrinsic.String.Build("{0}{1}__{2}", v.Local.sFolderBackUp, v.Ambient.Date.PervasiveDate, v.Local.sFiles(v.Local.iCnt), v.Local.sBackUpPath)
		f.Intrinsic.File.CopyOpenFile(v.Local.sFilePath, v.Local.sBackUpPath)
	f.Intrinsic.Control.Next(v.Local.iCnt)	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.copyFiles.End