Program.Sub.Preflight.Start
v.Global.sLogsPath.Declare
v.Global.sFilesPath.Declare
v.Global.sFixedFilesPath.Declare
v.Global.sBackUpPath.Declare
v.Global.sText.Declare
v.Global.sLines.Declare
v.Global.sGL_Lines.Declare
v.Global.iBatchLineNumber.Declare
v.Global.iBatchLineNumberCredit.Declare
v.Global.sBatchNumber.Declare
v.Global.sBatchNumberCredit.Declare
v.Global.sSingleBatchNumber.Declare
v.Global.sGLAccountDebit.Declare
v.Global.sGLAccountCredit.Declare
v.Global.sDateErrorLines.Declare
v.Global.iBatchLineNumber.Set(1)
v.Global.iBatchLineNumberCredit.Set(1)
v.Global.sDateBatch.Declare
v.Global.sFullDateBatch.Declare
Program.External.Include.Library("UPLAROP.lib")
Program.Sub.Preflight.End

Program.Sub.Main.Start
v.Local.sFilePath.Declare
f.Intrinsic.Control.Try
	'V.Global.bUPLAROPScreenless.Set(False)
	
	f.Intrinsic.Control.CallSub(checkCustom)

	
	f.Intrinsic.Control.CallSub(readFixedFiles)
	f.Intrinsic.String.Build("{0}\GCG_5536_SFTP_TRANSFER.g2u", v.Caller.GasDir, v.Local.sFilePath)
	f.Global.General.CallSyncGAS(v.Local.sFilePath)
	f.Intrinsic.Control.CallSub(getBatchNumber)
	f.Intrinsic.Control.CallSub(readFiles)
	'
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.Main.End

Program.Sub.ErrorMsg.Start
v.Local.sError.Declare

'Closes ODBC connection, default to connection : "con"
f.Intrinsic.Control.If(v.ODBC!con.State, =, 1)
	f.ODBC.Connection!con.Close
f.Intrinsic.Control.EndIf

'Generic Error message.
f.Intrinsic.String.Build("Project ProjectName.g2u {0}{0}Subroutine: {1}{0}Error: {2} with Description: {3}", v.Ambient.NewLine, v.Args.CurrentSub, v.Ambient.ErrorNumber, v.Ambient.ErrorDescription, v.Local.sError)
f.Intrinsic.UI.Msgbox(v.Local.sError)
Program.Sub.ErrorMsg.End

Program.Sub.checkCustom.Start
v.Local.sPath.Declare
v.Local.bRet.Declare

f.Intrinsic.Control.Try
	'LOGS Folder
	f.Intrinsic.String.Build("{0}\CUSTOM\GCG_5536\LOGS", v.Caller.GlobalDir, v.Local.sPath)
	f.Intrinsic.File.DirExists(v.Local.sPath, v.Local.bRet)
	
	f.Intrinsic.Control.If(v.Local.bRet, =, false)
		f.Intrinsic.File.CreateDir(v.Local.sPath)
	f.Intrinsic.Control.EndIf
	v.Global.sLogsPath.Set(v.Local.sPath)

	'Files Folder
	f.Intrinsic.String.Build("{0}\CUSTOM\GCG_5536\FILES", v.Caller.GlobalDir, v.Local.sPath)
	f.Intrinsic.File.DirExists(v.Local.sPath, v.Local.bRet)
	
	f.Intrinsic.Control.If(v.Local.bRet, =, false)
		f.Intrinsic.File.CreateDir(v.Local.sPath)
	f.Intrinsic.Control.EndIf	
	f.Intrinsic.String.Build("{0}\", v.Local.sPath, v.Global.sFilesPath)
	
	'Fixed Error Folder
	f.Intrinsic.String.Build("{0}\CUSTOM\GCG_5536\FIXED_ERRORS", v.Caller.GlobalDir, v.Local.sPath)
	f.Intrinsic.File.DirExists(v.Local.sPath, v.Local.bRet)
	
	f.Intrinsic.Control.If(v.Local.bRet, =, false)
		f.Intrinsic.File.CreateDir(v.Local.sPath)
	f.Intrinsic.Control.EndIf	
	f.Intrinsic.String.Build("{0}\", v.Local.sPath, v.Global.sFixedFilesPath)
	
	'Backup Folder
	f.Intrinsic.String.Build("{0}\CUSTOM\GCG_5536\BACK_UP", v.Caller.GlobalDir, v.Local.sPath)
	f.Intrinsic.File.DirExists(v.Local.sPath, v.Local.bRet)
	
	f.Intrinsic.Control.If(v.Local.bRet, =, false)
		f.Intrinsic.File.CreateDir(v.Local.sPath)
	f.Intrinsic.Control.EndIf	
	f.Intrinsic.String.Build("{0}\", v.Local.sPath, v.Global.sBackUpPath)
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.checkCustom.End

Program.Sub.readFiles.Start
v.Local.sFileList.Declare
v.Local.sFileRet.Declare
v.Local.iCnt.Declare
v.Local.sText.Declare
v.Local.sFieldTitles.Declare
v.Local.sFieldTypes.Declare
v.Local.sFilePathCSV.Declare
v.Local.sLogTexts.Declare
v.Local.sFilePathLog.Declare
v.Local.sFilePathUpLoad.Declare
v.Local.sName.Declare
v.Local.bExits.Declare
f.Intrinsic.Control.Try

	'Gets the files in the custom/files forlder. This will be change to SFTP
	f.Intrinsic.File.GetFileList(v.Global.sFilesPath, 1, v.Local.sFileRet)
	f.Intrinsic.String.Split(v.Local.sFileRet, ":", v.Local.sFileList)
	
	f.Intrinsic.Control.If(v.DataTable.termsDT.Exists)
		f.Data.DataTable.Close("termsDT")
	f.Intrinsic.Control.EndIf
	
'	f.Intrinsic.Control.If(v.DataTable.termsDT.Exists)
'		f.Data.DataTable.Close("termsDT")
'	f.Intrinsic.Control.EndIf
'	
'	f.Intrinsic.Control.If(v.DataTable.termsDT.Exists)
'		f.Data.DataTable.Close("termsDT")
'	f.Intrinsic.Control.EndIf
	
	' creates the dictionaries for customerXref, and Terms.
	f.ODBC.Connection!con.OpenCompanyConnection
		'f.Data.Dictionary.CreateFromSQL("customerXref", "con", "Select County, Customer from Customer_Master where Rec = '6'")
		f.Data.Dictionary.CreateFromSQL("customerXref", "con", "Select AS400_Customer, GSS_Customer from GCG_5536_Cust_XRef")
		f.Data.Dictionary.SetDefaultReturn("customerXref", "*BLANK*")
		
		f.Data.DataTable.CreateFromSQL("termsDT", "con", "Select Customer, RTrim (Payment_Terms) as Payment_Terms from V_Customer_Sales", true)
		
		f.Data.Dictionary.CreateFromSQL("termsDayDict", "con", "Select RTrim (Terms_Code) as Terms_Code, Terms_Due_Days from V_AR_Terms")
		f.Data.Dictionary.SetDefaultReturn("termsDayDict", "")
		
		f.Data.Dictionary.CreateFromSQL("customerNameDict", "con", "Select Customer, Name_Customer from V_Customer_Master")
		f.Data.Dictionary.SetDefaultReturn("customerNameDict", "")
		'****************************
		f.Data.DataTable.CreateFromSQL("openARDT", "con", "Select distinct RTRIM (Invoice) as InvoiceOpenAR from V_AR_OPEN_ITEMS")
		
	f.ODBC.Connection!con.Close
	'****************************	
	f.Data.DataTable.AddColumn("openARDT", "Existed", "String", "Y")
	
	f.Data.Dictionary.CreateFromDataTable("dictionaryAR", "openARDT", "InvoiceOpenAR", "Existed", 4)
	f.Data.Dictionary.SetDefaultReturn("dictionaryAR", "N")
	f.Data.DataTable.Close("openARDT")
	'****************************
	
	f.Data.DataTable.FillFromDictionary("termsDT", "termsDayDict", "Payment_Terms")
	f.Data.Dictionary.Close("termsDayDict")
	
	f.Data.Dictionary.CreateFromDataTable("termDueDaysDict", "termsDT", "Customer", "Payment_Terms", 4)
	
	f.Data.DataTable.Clone("UPLAROP", "CreditDT", true)
	
	'Loop through list of files in the designated folder, creates a Datatable with each file
	f.Intrinsic.Control.For(v.Local.iCnt, 0, v.Local.sFileList.UBound, 1)
	
		'Gets full UNC PATH, and creates datatable.
		f.Intrinsic.String.Build("{0}{1}", v.Global.sFilesPath, v.Local.sFileList(v.Local.iCnt), v.Local.sFilePathCSV)
		f.Intrinsic.String.Replace(v.Local.sFileList(v.Local.iCnt), ".csv", "", v.Local.sName)

		'Setting the Column Names and types depending on the type of file.
		f.Intrinsic.Control.If(v.Local.sName.UCase, =, "CVSPB")
			v.Local.sFieldTitles.Set("NotUseA*!*NotUseB*!*AS_Customer*!*Number*!*Invoice_Number*!*NotUseF*!*NotUseG*!*Invoice_Total*!*Month*!*Day*!*Year*!*Type*!*NotUseM*!*NotUseN*!*NotUseO*!*NotUseP*!*NotUseQ*!*NotUseR*!*NotUseS*!*NotUseT*!*NotUseU*!*NotUseV*!*NotUseW*!*NotUseX*!*NotUseY*!*NotUseZ*!*NotUseAA*!*NotUseAB")
			v.Local.sFieldTypes.Set("String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String")
		f.Intrinsic.Control.ElseIf(v.Local.sName.UCase, =, "MWARDET")
			v.Local.sFieldTitles.Set("NotUseA*!*NotUseB*!*AS_Customer*!*Number*!*Invoice_Number*!*NotUseF*!*NotUseG*!*Invoice_Total*!*Year*!*Month*!*Day*!*Type*!*Base_Sales*!*Salesman_No*!*Profit*!*NotUseP*!*NotUseQ*!*NotUseR*!*NotUseS*!*NotUseT*!*NotUseU*!*NotUseV*!*NotUseW*!*NotUseX*!*NotUseY")
			v.Local.sFieldTypes.Set("String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String")
		f.Intrinsic.Control.EndIf

		f.Intrinsic.File.File2String(v.Local.sFilePathCSV, v.Local.sText)
		
		'f.Data.DataTable.CreateFromCSV("dataImportDT", v.Local.sFilePathCSV, v.Local.sFieldTitles, v.Local.sFieldTypes, true)
		f.Data.DataTable.CreateFromString("dataImportDT", v.Local.sText, v.Local.sFieldTitles, v.Local.sFieldTypes, ",", v.Ambient.NewLine, true)
		
		'delete blankRow
		f.Intrinsic.Control.If(v.DataTable.dataImportDT(v.DataTable.dataImportDT.RowCount--).InvoiceNumber!FieldVarTrim, =, "")
			f.Data.DataTable.DeleteRow("dataImportDT", v.DataTable.dataImportDT.RowCount--)
		f.Intrinsic.Control.EndIf
		
		f.Data.DataTable.AddColumn("dataImportDT", "Name_Customer", "String")
		
		f.Data.DataTable.SetValueFormat("dataImportDT", -1, "Number", "Number", "000")
		f.Data.DataTable.AddExpressionColumn("dataImportDT", "AS_Customer_Exp", "String", "AS_Customer+Number" )
		
		f.Data.DataTable.AddColumn("dataImportDT", "AS_Customer_FULL", "String")
		
		f.Intrinsic.Control.If(v.Local.sName.UCase, =, "CVSPB")
			f.Data.DataTable.AddColumn("dataImportDT", "Salesman_No", "String")
		f.Intrinsic.Control.EndIf
		
		f.Data.DataTable.AddColumn("dataImportDT", "InvoiceOpenAR", "String")
		
		'changes the AS400 customers to GSS customers. Formats Money values.
	'	f.Data.DataTable.SetValueFormat("dataImportDT", -1, "AS_Customer_Exp", "AS_Customer_FULL", "!@@@@@@@")
		f.Data.DataTable.SetValueFormat("dataImportDT", -1, "AS_Customer_Exp", "AS_Customer_FULL", "!@@@@@@@")
		f.Data.Dictionary.SetDefaultReturn("customerXref", "*BLANK*")
		f.Data.DataTable.FillFromDictionary("dataImportDT", "customerXref", "AS_Customer_FULL", "AS_Customer_FULL")
		f.Data.DataTable.SetValueFormat("dataImportDT", -1, "Invoice_Total", "Invoice_Total", "##.##")
		f.Data.DataTable.FillFromDictionary("dataImportDT", "customerNameDict", "AS_Customer_FULL", "Name_Customer")
		
		'Add Terms Column
		f.Data.DataTable.AddColumn("dataImportDT", "Terms", "String")
		
		f.Data.DataTable.SetValueFormat("dataImportDT", -1, "AS_Customer_FULL", "AS_Customer_FULL", "!@@@@@@@")
		f.Data.Dictionary.SetDefaultReturn("termDueDaysDict", 0)
		f.Data.DataTable.FillFromDictionary("dataImportDT", "termDueDaysDict", "AS_Customer_FULL", "Terms")
		
		'Log unmatched 
		f.Data.DataView.Create("dataImportDT", "dataImportEmptyDV", 22, "AS_Customer_FULL = '*BLANK*'", "")		
		
		f.Intrinsic.Control.If(v.DataView.dataImportDT!dataImportEmptyDV.RowCount, >, 0)

		
			'f.Data.DataView.ToString("dataImportDT", "dataImportEmptyDV", v.Local.sFieldTitles, ",", v.Ambient.NewLine, v.Local.sLogTexts)
			f.Data.DataView.ToDataTable("dataImportDT", "dataImportEmptyDV", "logDT")
			f.Data.DataTable.RemoveColumn("logDT", "Name_Customer")
			f.Data.DataTable.RemoveColumn("logDT", "AS_Customer_Exp")
			f.Data.DataTable.RemoveColumn("logDT", "AS_Customer_FULL")
			f.Intrinsic.Control.If(v.Local.sName.UCase, =, "CVSPB")
				f.Data.DataTable.RemoveColumn("logDT", "Salesman_No")
			f.Intrinsic.Control.EndIf
			f.Data.DataTable.RemoveColumn("logDT", "Terms")
			
			f.Data.DataView.Create("logDT", "logDV", 22)
			f.Data.DataView.ToString("logDT", "logDV", v.Local.sFieldTitles, ",", v.Ambient.NewLine, v.Local.sLogTexts)
			f.Data.DataView.Close("logDT", "logDV")
			f.Data.DataTable.Close("logDT")
		f.Intrinsic.Control.EndIf		
		
		f.Intrinsic.Control.If(v.Local.sLogTexts.Trim, <>, "")
		f.Intrinsic.Control.AndIf(v.Local.sLogTexts.Trim, <>, ",,,,,,,,,,,,,,,,,,,,,,,,")
			f.Intrinsic.String.Build("{0}\{1}_{2}_{3}_UnmatchCustomer.csv", v.Global.sLogsPath, v.Local.sName, v.Local.iCnt, v.Ambient.Date.PervasiveDate, v.Local.sFilePathLog)
			f.Intrinsic.File.String2File(v.Local.sFilePathLog, v.Local.sLogTexts)
		f.Intrinsic.Control.EndIf
		
		'Log Existing Invoices 
		f.Data.DataTable.FillFromDictionary("dataImportDT", "dictionaryAR", "Invoice_Number", "InvoiceOpenAR")
		f.Data.DataView.SetFilter("dataImportDT", "dataImportEmptyDV", "InvoiceOpenAR = 'Y'")
		
		f.Intrinsic.Control.If(v.DataView.dataImportDT!dataImportEmptyDV.RowCount, >, 0)
			f.Data.DataView.ToDataTable("dataImportDT", "dataImportEmptyDV", "logDT")
			f.Data.DataTable.RemoveColumn("logDT", "Name_Customer")
			f.Data.DataTable.RemoveColumn("logDT", "AS_Customer_Exp")
			f.Data.DataTable.RemoveColumn("logDT", "AS_Customer_FULL")
			f.Data.DataTable.RemoveColumn("logDT", "InvoiceOpenAR")
			f.Intrinsic.Control.If(v.Local.sName.UCase, =, "CVSPB")
				f.Data.DataTable.RemoveColumn("logDT", "Salesman_No")
			f.Intrinsic.Control.EndIf
			f.Data.DataTable.RemoveColumn("logDT", "Terms")
			
			f.Data.DataView.Create("logDT", "logDV", 22)
			f.Data.DataView.ToString("logDT", "logDV", v.Local.sFieldTitles, ",", v.Ambient.NewLine, v.Local.sLogTexts)
			f.Data.DataView.Close("logDT", "logDV")
			f.Data.DataTable.Close("logDT")
		f.Intrinsic.Control.EndIf		
		
		f.Intrinsic.Control.If(v.Local.sLogTexts.Trim, <>, "")
		f.Intrinsic.Control.AndIf(v.Local.sLogTexts.Trim, <>, ",,,,,,,,,,,,,,,,,,,,,,,,")
			f.Intrinsic.String.Build("{0}\{1}_{2}_{3}_ExistingInvoice.csv", v.Global.sLogsPath, v.Local.sName, v.Local.iCnt, v.Ambient.Date.PervasiveDate, v.Local.sFilePathLog)
			f.Intrinsic.File.String2File(v.Local.sFilePathLog, v.Local.sLogTexts)
		f.Intrinsic.Control.EndIf
		
		'Creates a table with only match customer.
		f.Data.DataView.Create("dataImportDT", "dataImportFullDV", 22, "AS_Customer_FULL <> '*BLANK*' and InvoiceOpenAR <> 'Y'", "")
		f.Data.DataView.ToDataTable("dataImportDT", "dataImportFullDV", "fullImportDT", true)
		f.Data.DataView.Create("termsDT", "termsDV", 22)
	
		'Set Default Date.
		f.Data.DataView.Create("dataImportDT", "dataImportDV", 22, "Year <> ''", "")
		f.Data.DataView.ToDataTableDistinct("dataImportDT", "dataImportDV", "singleDateDT", "Year*!*Month*!*Day", True)
		
		f.Intrinsic.Control.If(v.DataTable.singleDateDT.RowCount, =, 1)
			f.Intrinsic.Control.If(v.DataTable.fullImportDT.RowCount, <, 1)
				'No Valid Records.
				f.Intrinsic.String.Build("File {0} - No Valid Records Found", v.Local.sFilePathCSV, v.Local.sLogTexts)
				f.Intrinsic.String.Build("{0}\{1}_{2}_{3}_NoValidRecords.csv", v.Global.sLogsPath, v.Local.sName, v.Local.iCnt, v.Ambient.Date.PervasiveDate, v.Local.sFilePathLog)
				f.Intrinsic.File.String2File(v.Local.sFilePathLog, v.Local.sLogTexts)
				
				f.Data.DataView.Close("termsDT", "termsDV")
				f.Data.DataTable.Close("fullImportDT")
				f.Data.DataView.Close("dataImportDT", "dataImportFullDV")
				f.Data.DataView.Close("dataImportDT", "dataImportEmptyDV")
				f.Data.DataView.Close("dataImportDT", "dataImportDV")
				f.Data.DataTable.Close("dataImportDT")
				f.Data.DataTable.Close("singleDateDT")
		
				f.Intrinsic.Control.Next(v.Local.iCnt)				
			f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.CallSub(addDateField, passedRow, 0)
			v.Global.sDateBatch.Set(v.Global.sText)
			f.Intrinsic.Control.CallSub(addFullDateField, passedRow,0)
			v.Global.sFullDateBatch.Set(v.Global.sText)
		f.Intrinsic.Control.Else
			'Multiple Dates.
			f.Intrinsic.String.Build("File {0} - Contains multiple dates", v.Local.sFilePathCSV, v.Local.sLogTexts)
			f.Intrinsic.String.Build("{0}\{1}_{2}_{3}_MultipleDates.csv", v.Global.sLogsPath, v.Local.sName, v.Local.iCnt, v.Ambient.Date.PervasiveDate, v.Local.sFilePathLog)
			f.Intrinsic.File.String2File(v.Local.sFilePathLog, v.Local.sLogTexts)
			
			f.Data.DataView.Close("termsDT", "termsDV")
			f.Data.DataTable.Close("fullImportDT")
			f.Data.DataView.Close("dataImportDT", "dataImportFullDV")
			f.Data.DataView.Close("dataImportDT", "dataImportEmptyDV")
			f.Data.DataView.Close("dataImportDT", "dataImportDV")
			f.Data.DataTable.Close("dataImportDT")
			f.Data.DataTable.Close("singleDateDT")
			
			f.Intrinsic.Control.Next(v.Local.iCnt)
		f.Intrinsic.Control.EndIf		
		
		'Set The GL Account
		f.Intrinsic.Control.If(v.Local.sName.UCase, =, "MWARDET")
			'Gets each row in the current datatable and creates rows for the upload file.
			v.Global.sGLAccountDebit.Set("01-01-01-110201")
			v.Global.sGLAccountCredit.Set("01-01-01-400101")
			f.Intrinsic.Control.CallSub(writeUPLAROP_File)
		f.Intrinsic.Control.ElseIf(v.Local.sName.UCase, =, "CVSPB")
			v.Global.sGLAccountDebit.Set("01-01-01-110201")
			v.Global.sGLAccountCredit.Set("01-01-01-400103")
			'Gets each row in the current datatable and creates rows for the upload file.
			f.Intrinsic.Control.CallSub(writeUPLAROP_File)
		f.Intrinsic.Control.EndIf
		
		'Gets each row in the current datatable and creates rows for the upload file.
		'f.Intrinsic.Control.CallSub(writeUPLAROP_File)
		
		f.Data.DataView.Close("termsDT", "termsDV")
		f.Data.DataTable.Close("fullImportDT")
		f.Data.DataView.Close("dataImportDT", "dataImportFullDV")
		f.Data.DataView.Close("dataImportDT", "dataImportEmptyDV")
		f.Data.DataView.Close("dataImportDT", "dataImportDV")
		f.Data.DataTable.Close("dataImportDT")
		f.Data.DataTable.Close("singleDateDT")
	f.Intrinsic.Control.Next(v.Local.iCnt)
		
		'v.Global.bUPLAROPScreenless.Set(False)
		
		f.Intrinsic.Control.CallSub(UPLAROPSync)
			f.Data.DataTable.DeleteRow("UPLAROP")
			f.Data.DataTable.AcceptChanges("UPLAROP")
			f.Data.DataTable.Merge("CreditDT", "UPLAROP", false, 2)
			f.Data.DataTable.DeleteRow("CreditDT")
			f.Data.DataTable.AcceptChanges("CreditDT")
			
			f.Intrinsic.Control.If(v.DataTable.UPLAROP.RowCount, >, 0)
				f.Intrinsic.Control.CallSub(UPLAROPSync)
			f.Intrinsic.Control.EndIf
'		f.Intrinsic.Control.EndIf		
		
		'Creates file path fot one shot project General Ledger Detail Master
		f.Intrinsic.String.Build("{0}\GLDETAIL.TXT", v.Caller.FilesDir, v.Local.sFilePathUpLoad)
		f.Intrinsic.File.String2File(v.Local.sFilePathUpLoad, v.Global.sGL_Lines)
		'f.Intrinsic.File.String2File("C:\Apps\Global\CUSTOM\GCG_5536\Test.txt", v.Global.sLines)
	
		'checks if file exists, and if does call the one shot program.
		f.Intrinsic.File.Exists( v.Local.sFilePathUpLoad, v.Local.bExits)
		f.Intrinsic.Control.If(v.Local.bExits)
			f.Global.General.CallWrapperSync(50, "UPLGDETL/U")
			'f.Global.General.CallWrapperSync(50, "UPLGDETL/A")
		f.Intrinsic.Control.EndIf		
		f.Data.Dictionary.Close("dictionaryAR")
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.readFiles.End

Program.Sub.writeUPLAROP_File.Start
v.Local.iCnt.Declare
v.Local.sBatchLineNumber.Declare
v.Local.fAmount.Declare
v.Local.sGLAccount1.Declare
v.Local.sGLAccount2.Declare
v.Local.sTransactionCode.Declare
v.Local.sCustomer.Declare
v.Local.sFilter.Declare
v.Local.iTerms.Declare
v.Local.dTempDate.Declare
v.Local.sInvoice.Declare
v.Local.sInvoiceDate.Declare
v.Local.sInvoiceDueDate.Declare
v.Local.sCurrentBatchNumber.Declare
v.Local.sSalesman.Declare
f.Intrinsic.Control.Try	
		
	f.Intrinsic.Control.For(v.Local.iCnt, 0, v.DataTable.fullImportDT.RowCount--, 1)
		'Customer
		v.Local.sCustomer.Set(v.DataTable.dataImportDT(v.Local.iCnt).AS_Customer_FULL!FieldValTrim)
		'Invoice Number
		v.Local.sInvoice.Set(v.DataTable.dataImportDT(v.Local.iCnt).Invoice_Number!FieldValTrim)
		'Invoice Amount
		f.Intrinsic.Control.CallSub(addLeftField, passedLenght, 16, passedRow, v.Local.iCnt, passedField, "Invoice_Total")
		v.Local.fAmount.Set(v.Global.sText)
		f.Intrinsic.Control.If(v.Local.fAmount, >, 0)
			v.Local.sTransactionCode.Set("10")
			v.Local.sGLAccount1.Set(V.Global.sGLAccountDebit)
			v.Local.sGLAccount2.Set(V.Global.sGLAccountCredit)
			v.Local.sBatchLineNumber.Set(v.Global.iBatchLineNumber)
			v.Local.sCurrentBatchNumber.Set(v.Global.sBatchNumber)
		f.Intrinsic.Control.Else
			v.Local.sTransactionCode.Set("12")
			v.Local.sGLAccount1.Set(V.Global.sGLAccountCredit)
			v.Local.sGLAccount2.Set(V.Global.sGLAccountDebit)
			v.Local.sBatchLineNumber.Set(v.Global.iBatchLineNumberCredit)
			v.Local.sCurrentBatchNumber.Set(v.Global.sBatchNumberCredit)
		f.Intrinsic.Control.EndIf	
		'f.Intrinsic.Math.Abs(v.Local.fAmount, v.Local.fAmount)
		'Batch Number
		f.Intrinsic.String.LPad(v.Local.sBatchLineNumber, "0", 4, v.Local.sBatchLineNumber)
		'Invoice Date
		'f.Intrinsic.Control.CallSub(addDateField, passedRow, v.Local.iCnt)
		v.Local.sInvoiceDate.Set(v.Global.sDateBatch)
		f.Intrinsic.Date.ConvertDString(v.Global.sDateBatch, "MMDDYY", v.Local.dTempDate)
		v.Global.sText.Set("")
		'Invoice Due Date
		v.Local.sCustomer.Set(v.DataTable.fullImportDT(v.Local.iCnt).AS_Customer_FULL!FieldValTrim)
		f.Intrinsic.String.Build("Customer = '{0}'", v.Local.sCustomer, v.Local.sFilter)
		f.Data.DataView.SetFilter("termsDT", "termsDV", v.Local.sFilter)	
		
		f.Intrinsic.Control.If(v.DataView.termsDT!termsDV.RowCount, =, 1)
			v.Local.iTerms.Set(v.DataView.termsDT!termsDV(0).Payment_terms!FieldVal)
		f.Intrinsic.Control.Else
			v.Local.iTerms.Set(0)
		f.Intrinsic.Control.EndIf
		
		f.Intrinsic.Date.DateAdd("D", v.Local.iTerms, v.Local.dTempDate, v.Local.dTempDate)
		v.Local.sInvoiceDueDate.Set(v.Local.dTempDate.String)
		f.Intrinsic.String.Format(v.Local.sInvoiceDueDate, "yyyymmdd", v.Local.sInvoiceDueDate)
		
		'Salesman
		v.Local.sSalesman.Set(v.DataTable.fullImportDT(v.Local.iCnt).Salesman_No!FieldVal)
		f.Intrinsic.String.Left(v.Local.sSalesman.Trim, 3, v.Local.sSalesman)
		f.Intrinsic.String.RPad(v.Local.sSalesman.Trim, " ", 3, v.Local.sSalesman)
		
		f.Intrinsic.Control.If(v.Local.fAmount, >, 0)
			f.Data.DataTable.AddRow("UPLAROP", "CustNum", v.Local.sCustomer, "InvNum", v.Local.sInvoice,"TransCode", v.Local.sTransactionCode, "BatchNum",  v.Global.sBatchNumber, "BatchLine", v.Local.sBatchLineNumber,"InvDate", v.Local.sInvoiceDate, "InvTotal", v.Local.fAmount, "GLAcct", v.Local.sGLAccount1, "InvAmt", v.Local.fAmount, "InvDueDate", v.Local.sInvoiceDueDate, "Salesman", v.Local.sSalesman)
			
			'add GL Account to GL LINE
			f.Intrinsic.Control.CallSub(writeUPLGDETL_File, passedCnt, v.Local.iCnt, passedGL, v.Local.sGLAccount1, passedTransType, v.Local.sTransactionCode, passedMult, 1, passedBatchNumber, v.Local.sCurrentBatchNumber)
			'add GL Account to GL LINE
			f.Intrinsic.Control.CallSub(writeUPLGDETL_File, passedCnt, v.Local.iCnt, passedGL, v.Local.sGLAccount2, passedTransType, v.Local.sTransactionCode, passedMult, -1, passedBatchNumber, v.Local.sCurrentBatchNumber)
		
		f.Intrinsic.Control.Else
			f.Data.DataTable.AddRow("CreditDT", "CustNum", v.Local.sCustomer, "InvNum", v.Local.sInvoice,"TransCode", v.Local.sTransactionCode, "BatchNum",  v.Global.sBatchNumberCredit, "BatchLine", v.Local.sBatchLineNumber,"InvDate", v.Local.sInvoiceDate, "InvTotal", v.Local.fAmount, "GLAcct", v.Local.sGLAccount1, "InvAmt", v.Local.fAmount, "InvDueDate", v.Local.sInvoiceDueDate, "Salesman", v.Local.sSalesman)
			
			'add GL Account to GL LINE
			f.Intrinsic.Control.CallSub(writeUPLGDETL_File, passedCnt, v.Local.iCnt, passedGL, v.Local.sGLAccount1, passedTransType, v.Local.sTransactionCode, passedMult, -1, passedBatchNumber, v.Local.sCurrentBatchNumber)
			'add GL Account to GL LINE
			f.Intrinsic.Control.CallSub(writeUPLGDETL_File, passedCnt, v.Local.iCnt, passedGL, v.Local.sGLAccount2, passedTransType, v.Local.sTransactionCode, passedMult, 1, passedBatchNumber, v.Local.sCurrentBatchNumber)
			
		f.Intrinsic.Control.EndIf

		f.Intrinsic.Control.If(v.Local.fAmount, >, 0)
			f.Intrinsic.Math.Add(v.Global.iBatchLineNumber, 1, v.Global.iBatchLineNumber)
		f.Intrinsic.Control.Else
			f.Intrinsic.Math.Add(v.Global.iBatchLineNumberCredit, 1, v.Global.iBatchLineNumberCredit)
		f.Intrinsic.Control.EndIf
		
	f.Intrinsic.Control.Next(v.Local.iCnt)	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.writeUPLAROP_File.End

Program.Sub.writeUPLGDETL_File.Start
v.Local.sLine.Declare
v.Local.iCnt.Declare
v.Local.sTemp.Declare
v.Local.sBatch.Declare
v.Local.sBatchNumber.Declare
v.Local.sEmpty.Declare
v.Local.sGL_Account.Declare
v.Local.sPostDate.Declare
v.Local.iTerms.Declare
v.Local.dTempDate.Declare(date,)
v.Local.sCustomer.Declare
v.Local.sFilter.Declare
v.Local.sTransactionType.Declare
v.Local.bDateError.Declare
v.Local.fAmount.Declare
f.Intrinsic.Control.Try	

'	F.Intrinsic.Date.DateAdd("D", -1, V.Ambient.Date, V.Local.dTempDate)
'	f.Intrinsic.String.Split(v.Local.dTempDate.PervasiveDate, "-", v.Local.sTemp)
'	'f.Intrinsic.String.Split(v.Ambient.Date.PervasiveDate, "-", v.Local.sTemp)
'	f.Intrinsic.String.Join(v.Local.sTemp, , v.Local.sPostDate)
	v.Local.sGL_Account.Set(v.Args.passedGL)
	v.Local.sTransactionType.Set(v.Args.passedTransType)
	

	v.Local.iCnt.Set(v.Args.passedCnt)
	
	v.Local.iTerms.Set(v.DataTable.dataImportDT(v.Local.iCnt).Terms!FieldValTrim)
	
	'GL Account
	f.Intrinsic.String.RPad(V.Local.sGL_Account, " ", 15, v.Local.sEmpty)
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Local.sEmpty, v.Local.sLine)
	v.Local.sEmpty.Set("")
	'Post Date 
	'f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Local.sPostDate, v.Local.sLine)
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Global.sFullDateBatch, v.Local.sLine)
	'Transaction Batch Number
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Args.passedBatchNumber, v.Local.sLine)
	'Transaction Batch Number
	f.Intrinsic.String.RPad(v.Local.sEmpty, " ", 5, v.Local.sEmpty)
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Local.sEmpty, v.Local.sLine)
	v.Local.sEmpty.Set("")
	'Transaction Voucher Number
	f.Intrinsic.String.RPad(v.Local.sEmpty, " ", 7, v.Local.sEmpty)
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Local.sEmpty, v.Local.sLine)
	v.Local.sEmpty.Set("")
	'Reference
	f.Intrinsic.Control.CallSub(addField, passedLenght, 15, passedRow, v.Local.iCnt, passedField, "Invoice_Number")
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Global.sText, v.Local.sLine)
	v.Global.sText.Set("")
	'Amount
	f.Intrinsic.Control.CallSub(addLeftField, passedLenght, 16, passedRow, v.Local.iCnt, passedField, "Invoice_Total")
	v.Local.fAmount.Set(v.Global.sText.trim)
	f.Intrinsic.Math.Mult(v.Local.fAmount, v.Args.passedMult, v.Local.fAmount)
	f.Intrinsic.String.LPad(v.Local.fAmount.String, " ", 16, v.Global.sText)
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Global.sText, v.Local.sLine)
	v.Global.sText.Set("")
	'Description  
	f.Intrinsic.Control.CallSub(addField, passedLenght, 30, passedRow, v.Local.iCnt, passedField, "Name_Customer")
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Global.sText, v.Local.sLine)
	v.Global.sText.Set("")
	'Application Type
	f.Intrinsic.String.RPad(v.Local.sEmpty, " ", 2, v.Local.sEmpty)
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Local.sEmpty, v.Local.sLine)
	v.Local.sEmpty.Set("")
	'Transaction Type
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Local.sTransactionType, v.Local.sLine)
	v.Local.sEmpty.Set("")
	'Customer ID
'************************************************************************************************Needs Attention: Check if it is customer Number,		
	f.Intrinsic.Control.CallSub(addLeftField, passedLenght, 7, passedRow, v.Local.iCnt, passedField, "AS_Customer_FULL")
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Global.sText, v.Local.sLine)
	v.Global.sText.Set("")
	'Vendor ID
	f.Intrinsic.String.RPad(v.Local.sEmpty, " ", 7, v.Local.sEmpty)
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Local.sEmpty, v.Local.sLine)
	v.Local.sEmpty.Set("")
	'PO Number
	f.Intrinsic.String.RPad(v.Local.sEmpty, " ", 7, v.Local.sEmpty)
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Local.sEmpty, v.Local.sLine)
	v.Local.sEmpty.Set("")
	'Invoice Number
	f.Intrinsic.String.RPad(v.Local.sEmpty, " ", 15, v.Local.sEmpty)
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Local.sEmpty, v.Local.sLine)
	v.Local.sEmpty.Set("")

	'Invoice Date.
''	f.Intrinsic.Control.If(v.Local.iCnt, =, 489)
''	f.Intrinsic.Control.EndIf
	'f.Intrinsic.Control.CallSub(addFullDateField, passedRow, v.Local.iCnt)
	f.Intrinsic.Control.If(v.Global.sFullDateBatch, =, "19000101")
		v.Local.bDateError.Set(true)	
	f.Intrinsic.Control.EndIf
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Global.sFullDateBatch, v.Local.sLine)
	f.Intrinsic.Date.ConvertDString(v.Global.sFullDateBatch, "YYYY/MM/DD", v.Local.dTempDate)
	v.Global.sText.Set("")
	
	'Invoice Due Date
	v.Local.sCustomer.Set(v.DataTable.fullImportDT(v.Local.iCnt).AS_Customer_FULL!FieldValTrim)
	f.Intrinsic.String.Build("Customer = '{0}'", v.Local.sCustomer, v.Local.sFilter)
	f.Data.DataView.SetFilter("termsDT", "termsDV", v.Local.sFilter)	
	
	f.Intrinsic.Control.If(v.DataView.termsDT!termsDV.RowCount, =, 1)
		v.Local.iTerms.Set(v.DataView.termsDT!termsDV(0).Payment_terms!FieldVal)
	f.Intrinsic.Control.Else
		v.Local.iTerms.Set(0)
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Date.DateAdd("D", v.Local.iTerms, v.Local.dTempDate, v.Local.dTempDate)
	f.Intrinsic.String.Replace(v.Local.dTempDate.PervasiveDate, "-", "", v.Global.sText)
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine,  v.Global.sText, v.Local.sLine)
	v.Global.sText.Set("")
	'Check System
	f.Intrinsic.String.RPad(v.Local.sEmpty, " ", 2, v.Local.sEmpty)
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Local.sEmpty, v.Local.sLine)
	v.Local.sEmpty.Set("")
	'Check Number
	f.Intrinsic.String.RPad(v.Local.sEmpty, " ", 6, v.Local.sEmpty)
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Local.sEmpty, v.Local.sLine)
	v.Local.sEmpty.Set("")
	'Check Date
	f.Intrinsic.String.RPad(v.Local.sEmpty, " ", 8, v.Local.sEmpty)
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Local.sEmpty, v.Local.sLine)
	v.Local.sEmpty.Set("")
	'Check Gross Amount
	f.Intrinsic.String.RPad(v.Local.sEmpty, " ", 16, v.Local.sEmpty)
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Local.sEmpty, v.Local.sLine)
	v.Local.sEmpty.Set("")
	'Check Discount Amount
	f.Intrinsic.String.RPad(v.Local.sEmpty, " ", 11, v.Local.sEmpty)
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Local.sEmpty, v.Local.sLine)
	v.Local.sEmpty.Set("")
	'Check Net Amount
	f.Intrinsic.String.RPad(v.Local.sEmpty, " ", 16, v.Local.sEmpty)
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Local.sEmpty, v.Local.sLine)
	v.Local.sEmpty.Set("")		
	
	f.Intrinsic.Control.If(v.Local.bDateError)
		f.Intrinsic.Control.If(v.Global.sDateErrorLines, =, "")
			v.Global.sDateErrorLines.Set(v.Local.sLine)
		f.Intrinsic.Control.Else
			f.Intrinsic.String.Build("{0}{1}{2}", v.Global.sGL_Lines, v.Ambient.NewLine, v.Local.sLine, v.Global.sDateErrorLines)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Else
		f.Intrinsic.Control.If(v.Global.sGL_Lines, =, "")
			v.Global.sGL_Lines.Set(v.Local.sLine)
		f.Intrinsic.Control.Else
			f.Intrinsic.String.Build("{0}{1}{2}", v.Global.sGL_Lines, v.Ambient.NewLine, v.Local.sLine, v.Global.sGL_Lines)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.writeUPLGDETL_File.End

Program.Sub.addField.Start
v.Local.iLength.Declare
v.Local.sField.Declare

f.Intrinsic.Control.Try
	v.Local.iLength.Set(v.Args.passedLenght)
	v.Local.sField.Set(v.DataTable.fullImportDT(v.Args.passedRow).[v.Args.passedField]!FieldValTrim)
	f.Intrinsic.String.Left(v.Local.sField, v.Local.iLength, v.Local.sField)
	f.Intrinsic.String.RPad(v.Local.sField, " ", v.Local.iLength, v.Global.sText)
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.addField.End

Program.Sub.addLeftField.Start
v.Local.iLength.Declare
v.Local.sField.Declare

f.Intrinsic.Control.Try
	v.Local.iLength.Set(v.Args.passedLenght)
	v.Local.sField.Set(v.DataTable.fullImportDT(v.Args.passedRow).[v.Args.passedField]!FieldValTrim)
	f.Intrinsic.String.Left(v.Local.sField, v.Local.iLength, v.Local.sField)
	f.Intrinsic.String.LPad(v.Local.sField, " ", v.Local.iLength, v.Global.sText)
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.addLeftField.End

Program.Sub.addDateField.Start
v.Local.sYear.Declare
v.Local.sMonth.Declare
v.Local.sDay.Declare
v.Local.sField.Declare

f.Intrinsic.Control.Try
	v.Local.sYear.Set(v.DataTable.fullImportDT(v.Args.passedRow).Year!FieldValTrim)
	v.Local.sMonth.Set(v.DataTable.fullImportDT(v.Args.passedRow).Month!FieldValTrim)
	v.Local.sDay.Set(v.DataTable.fullImportDT(v.Args.passedRow).Day!FieldValTrim)
	
	f.Intrinsic.String.Right(v.Local.sYear, 2, v.Local.sYear)
	f.Intrinsic.String.LPad(v.Local.sMonth, "0", 2, v.Local.sMonth)
	f.Intrinsic.String.LPad(v.Local.sDay, "0", 2, v.Local.sDay)
	
	f.Intrinsic.String.Build("{0}{1}{2}", v.Local.sMonth, v.Local.sDay, v.Local.sYear, v.Global.sText)
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.addDateField.End

Program.Sub.addFullDateField.Start
v.Local.sYear.Declare
v.Local.sMonth.Declare
v.Local.sDay.Declare
v.Local.sField.Declare
V.Local.sCentury.Declare

f.Intrinsic.Control.Try
	v.Local.sCentury.Set(v.DataTable.fullImportDT(v.Args.passedRow).Year!FieldValTrim)
	v.Local.sYear.Set(v.DataTable.fullImportDT(v.Args.passedRow).Year!FieldValTrim)
	v.Local.sMonth.Set(v.DataTable.fullImportDT(v.Args.passedRow).Month!FieldValTrim)
	v.Local.sDay.Set(v.DataTable.fullImportDT(v.Args.passedRow).Day!FieldValTrim)
	
	f.Intrinsic.String.Right(v.Local.sYear, 2, v.Local.sYear)
	f.Intrinsic.String.LPad(v.Local.sMonth, "0", 2, v.Local.sMonth)
	f.Intrinsic.String.LPad(v.Local.sDay, "0", 2, v.Local.sDay)
	
	f.Intrinsic.String.Left(v.Local.sCentury, 1, v.Local.sCentury)
	f.Intrinsic.Control.If(v.Local.sCentury, =, "1")
		v.Local.sCentury.Set("20")
	f.Intrinsic.Control.ElseIf(v.Local.sCentury, =, "0")
		v.Local.sCentury.Set("19")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.Local.sYear, =, "0")
		v.Local.sYear.Set("00")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.Local.sMonth, =, "00")
		v.Local.sMonth.Set("01")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.Local.sDay, =, "00")
		v.Local.sDay.Set("01")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.String.Build("{0}{1}{2}{3}", v.Local.sCentury, v.Local.sYear, v.Local.sMonth, v.Local.sDay, v.Global.sText)
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.addFullDateField.End

Program.Sub.getBatchNumber.Start
v.Local.sBatch.Declare
v.Local.sTemp.Declare
v.Local.iNumber.Declare
v.Local.sChar.Declare
v.Local.sSQL.Declare
f.Intrinsic.Control.Try

	f.ODBC.Connection!con.OpenCompanyConnection
		f.ODBC.Connection!con.ExecuteAndReturn("select MAX(GCG_AR_BATCH) as BATCH from GCG_5536_AR_BATCH where GCG_AR_BATCH like 'M%'", v.Local.sBatch)
	f.ODBC.Connection!con.Close
	
	f.Intrinsic.Control.If(v.Local.sBatch, =, "M9999")
		f.Intrinsic.UI.Msgbox("You Have reached the max number of Batches, Please Contact Global Shop.")
		f.Intrinsic.Control.End
	f.Intrinsic.Control.EndIf
	
	
	f.Intrinsic.Control.If(v.Local.sBatch.Trim, =, "")
		 f.ODBC.Connection!con.OpenCompanyConnection
			f.Intrinsic.String.Build("Insert into  GCG_5536_AR_BATCH (GCG_AR_BATCH, GSS_USER, CREATED_ON) Values ('M0001', '{0}', '{1}')", v.Caller.User, v.Ambient.Date.PervasiveDate, v.Local.sSQL.Declare)
			f.ODBC.Connection!con.Execute(v.Local.sSQL.Declare)
			f.Intrinsic.String.Build("Insert into  GCG_5536_AR_BATCH (GCG_AR_BATCH, GSS_USER, CREATED_ON) Values ('M0002', '{0}', '{1}')", v.Caller.User, v.Ambient.Date.PervasiveDate, v.Local.sSQL.Declare)
			f.ODBC.Connection!con.Execute(v.Local.sSQL.Declare)
		f.ODBC.Connection!con.Close
		
		v.Global.sBatchNumber.Set("M0001")
		v.Global.sBatchNumberCredit.Set("M0002")
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Right(v.Local.sBatch.Trim, 4, v.Local.sTemp)
		f.Intrinsic.String.Left(v.Local.sBatch.Trim, 1, v.Local.sChar)
		f.Intrinsic.Control.If(v.Local.sTemp.IsNumeric)
			v.Local.iNumber.Set(v.Local.sTemp)
			f.Intrinsic.Math.Add(v.Local.iNumber, 1, v.Local.iNumber)
			f.Intrinsic.String.LPad(v.Local.iNumber, "0", 4, v.Local.sTemp)
			f.Intrinsic.String.Build("{0}{1}", v.Local.sChar, v.Local.sTemp, v.Global.sBatchNumber)
			
			f.Intrinsic.Math.Add(v.Local.iNumber, 1, v.Local.iNumber)
			f.Intrinsic.String.LPad(v.Local.iNumber, "0", 4, v.Local.sTemp)
			f.Intrinsic.String.Build("{0}{1}", v.Local.sChar, v.Local.sTemp, v.Global.sBatchNumberCredit)
			
			f.ODBC.Connection!con.OpenCompanyConnection
				f.Intrinsic.String.Build("Insert into  GCG_5536_AR_BATCH (GCG_AR_BATCH, GSS_USER, CREATED_ON) Values ('{0}', '{1}', '{2}')", v.Global.sBatchNumber, v.Caller.User, v.Ambient.Date.PervasiveDate, v.Local.sSQL.Declare)
				f.ODBC.Connection!con.Execute(v.Local.sSQL.Declare)
				
				f.Intrinsic.String.Build("Insert into  GCG_5536_AR_BATCH (GCG_AR_BATCH, GSS_USER, CREATED_ON) Values ('{0}', '{1}', '{2}')", v.Global.sBatchNumberCredit, v.Caller.User, v.Ambient.Date.PervasiveDate, v.Local.sSQL.Declare)
				f.ODBC.Connection!con.Execute(v.Local.sSQL.Declare)
			f.ODBC.Connection!con.Close
		
		f.Intrinsic.Control.Else
			f.Intrinsic.UI.Msgbox("No Batch Found")
			f.Intrinsic.Control.End
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.Global.sBatchNumber, = "M9999")
		f.Intrinsic.UI.Msgbox("You Have reached the max number of Batches, Please Contact Global Shop.")
		f.Intrinsic.Control.End
	f.Intrinsic.Control.EndIf
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.getBatchNumber.End

Program.Sub.deleteFiles.Start
v.Local.sFileRet.Declare
v.Local.sFileList.Declare
v.Local.iCnt.Declare
f.Intrinsic.Control.Try
	'Gets the files in the custom/files forlder. This will be change to SFTP
	f.Intrinsic.File.GetFileList(v.Global.sFixedFilesPath, 1, v.Local.sFileRet)
	f.Intrinsic.String.Split(v.Local.sFileRet, ":", v.Local.sFileList)
	f.Intrinsic.Control.For(v.Local.iCnt, 0, v.Local.sFileList.UBound, 1)
		f.Intrinsic.String.Build("{0}{1}", v.Global.sFixedFilesPath, v.Local.sFileList(v.Local.iCnt), v.Local.sFileRet)
		f.Intrinsic.File.DeleteFile(v.Local.sFileRet)
	f.Intrinsic.Control.Next(v.Local.iCnt)
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.deleteFiles.End

Program.Sub.readFixedFiles.Start
v.Local.sFileList.Declare
v.Local.sFileRet.Declare
v.Local.iCnt.Declare
v.Local.sText.Declare
v.Local.sFieldTitles.Declare
v.Local.sFieldTypes.Declare
v.Local.sFilePathCSV.Declare
v.Local.sLogTexts.Declare
v.Local.sFilePathLog.Declare
v.Local.sFilePathUpLoad.Declare
v.Local.sName.Declare
v.Local.bExits.Declare
f.Intrinsic.Control.Try
	'Gets the files in the custom/files forlder. This will be change to SFTP
	f.Intrinsic.File.GetFileList(v.Global.sFixedFilesPath, 1, v.Local.sFileRet)
	f.Intrinsic.String.Split(v.Local.sFileRet, ":", v.Local.sFileList)
	f.Intrinsic.Control.If(v.Local.sFileList.Trim, =, "")
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	' creates the dictionaries for customerXref, and Terms.
	f.ODBC.Connection!con.OpenCompanyConnection
		f.Data.Dictionary.CreateFromSQL("customerXref", "con", "Select AS400_Customer, GSS_Customer from GCG_5536_Cust_XRef")
		f.Data.Dictionary.SetDefaultReturn("customerXref", "*BLANK*")
		
		f.Data.DataTable.CreateFromSQL("termsDT", "con", "Select Customer, RTrim (Payment_Terms) as Payment_Terms from V_Customer_Sales", true)
		
		f.Data.Dictionary.CreateFromSQL("termsDayDict", "con", "Select RTrim (Terms_Code) as Terms_Code, Terms_Due_Days from V_AR_Terms")
		f.Data.Dictionary.SetDefaultReturn("termsDayDict", "")
		
		f.Data.Dictionary.CreateFromSQL("customerNameDict", "con", "Select Customer, Name_Customer from V_Customer_Master")
		f.Data.Dictionary.SetDefaultReturn("customerNameDict", "")
		
		f.Data.DataTable.CreateFromSQL("openARDT", "con", "Select distinct RTRIM (Invoice) as InvoiceOpenAR from V_AR_OPEN_ITEMS")
	f.ODBC.Connection!con.Close
	
	f.Data.DataTable.AddColumn("openARDT", "Existed", "String", "Y")
	
	f.Data.Dictionary.CreateFromDataTable("dictionaryAR", "openARDT", "InvoiceOpenAR", "Existed", 4)
	f.Data.Dictionary.SetDefaultReturn("dictionaryAR", "N")
	f.Data.DataTable.Close("openARDT")
	
	f.Data.DataTable.FillFromDictionary("termsDT", "termsDayDict", "Payment_Terms")
	f.Data.Dictionary.Close("termsDayDict")
	
	f.Data.Dictionary.CreateFromDataTable("termDueDaysDict", "termsDT", "Customer", "Payment_Terms", 4)
	
	'Loop through list of files in the designated folder, creates a Datatable with each file
	f.Intrinsic.Control.For(v.Local.iCnt, 0, v.Local.sFileList.UBound, 1)
	
		'Gets full UNC PATH, and creates datatable.
		f.Intrinsic.String.Build("{0}{1}", v.Global.sFixedFilesPath, v.Local.sFileList(v.Local.iCnt), v.Local.sFilePathCSV)
		f.Intrinsic.String.Replace(v.Local.sFileList(v.Local.iCnt), ".csv", "", v.Local.sName)

		'Setting the Column Names and types depending on the type of file.
		f.Intrinsic.Control.If(v.Local.sName.UCase, =, "CVSPB")
			v.Local.sFieldTitles.Set("NotUseA*!*NotUseB*!*AS_Customer*!*Number*!*Invoice_Number*!*NotUseF*!*NotUseG*!*Invoice_Total*!*Month*!*Day*!*Year*!*Type*!*NotUseM*!*NotUseN*!*NotUseO*!*NotUseP*!*NotUseQ*!*NotUseR*!*NotUseS*!*NotUseT*!*NotUseU*!*NotUseV*!*NotUseW*!*NotUseX*!*NotUseY*!*NotUseZ*!*NotUseAA*!*NotUseAB")
			v.Local.sFieldTypes.Set("String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String")
		f.Intrinsic.Control.ElseIf(v.Local.sName.UCase, =, "MWARDET")
			v.Local.sFieldTitles.Set("NotUseA*!*NotUseB*!*AS_Customer*!*Number*!*Invoice_Number*!*NotUseF*!*NotUseG*!*Invoice_Total*!*Year*!*Month*!*Day*!*Type*!*Base_Sales*!*Salesman_No*!*Profit*!*NotUseP*!*NotUseQ*!*NotUseR*!*NotUseS*!*NotUseT*!*NotUseU*!*NotUseV*!*NotUseW*!*NotUseX*!*NotUseY")
			v.Local.sFieldTypes.Set("String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String")
		f.Intrinsic.Control.EndIf

		f.Intrinsic.File.File2String(v.Local.sFilePathCSV, v.Local.sText)
		'f.Data.DataTable.CreateFromCSV("dataImportDT", v.Local.sFilePathCSV, v.Local.sFieldTitles, v.Local.sFieldTypes, true)
		f.Data.DataTable.CreateFromString("dataImportDT", v.Local.sText, v.Local.sFieldTitles, v.Local.sFieldTypes, ",", v.Ambient.NewLine, true)
		f.Data.DataTable.AddColumn("dataImportDT", "Name_Customer", "String")
		
		f.Data.DataTable.SetValueFormat("dataImportDT", -1, "Number", "Number", "000")
		f.Data.DataTable.AddExpressionColumn("dataImportDT", "AS_Customer_Exp", "String", "AS_Customer+Number" )
		
		f.Data.DataTable.AddColumn("dataImportDT", "AS_Customer_FULL", "String")
		
		f.Intrinsic.Control.If(v.Local.sName.UCase, =, "CVSPB")
			f.Data.DataTable.AddColumn("dataImportDT", "Salesman_No", "String")
		f.Intrinsic.Control.EndIf
		
		f.Data.DataTable.AddColumn("dataImportDT", "InvoiceOpenAR", "String")
		
		'changes the AS400 customers to GSS customers. Formats Money values.
	'	f.Data.DataTable.SetValueFormat("dataImportDT", -1, "AS_Customer_Exp", "AS_Customer_FULL", "!@@@@@@@")
		f.Data.DataTable.SetValueFormat("dataImportDT", -1, "AS_Customer_Exp", "AS_Customer_FULL", "!@@@@@@@")
		f.Data.Dictionary.SetDefaultReturn("customerXref", "*BLANK*")
		f.Data.DataTable.FillFromDictionary("dataImportDT", "customerXref", "AS_Customer_FULL", "AS_Customer_FULL")
		f.Data.DataTable.SetValueFormat("dataImportDT", -1, "Invoice_Total", "Invoice_Total", "##.##")
		f.Data.DataTable.FillFromDictionary("dataImportDT", "customerNameDict", "AS_Customer_FULL", "Name_Customer")
		
		'Add Terms Column
		f.Data.DataTable.AddColumn("dataImportDT", "Terms", "String")
		
		f.Data.DataTable.SetValueFormat("dataImportDT", -1, "AS_Customer_FULL", "AS_Customer_FULL", "!@@@@@@@")
		f.Data.Dictionary.SetDefaultReturn("termDueDaysDict", 0)
		f.Data.DataTable.FillFromDictionary("dataImportDT", "termDueDaysDict", "AS_Customer_FULL", "Terms")
		
		'Log unmatched 
'		f.Data.DataView.Create("dataImportDT", "dataImportEmptyDV", 22, "AS_Customer_FULL = '*BLANK*'", "")		
'		f.Data.DataView.ToString("dataImportDT", "dataImportEmptyDV", v.Local.sFieldTitles, ",", v.Ambient.NewLine, v.Local.sLogTexts)
		
		f.Data.DataView.Create("dataImportDT", "dataImportEmptyDV", 22, "AS_Customer_FULL = '*BLANK*'", "")		
		
		f.Intrinsic.Control.If(v.DataView.dataImportDT!dataImportEmptyDV.RowCount, >, 0)

		
			'f.Data.DataView.ToString("dataImportDT", "dataImportEmptyDV", v.Local.sFieldTitles, ",", v.Ambient.NewLine, v.Local.sLogTexts)
			f.Data.DataView.ToDataTable("dataImportDT", "dataImportEmptyDV", "logDT")
			f.Data.DataTable.RemoveColumn("logDT", "Name_Customer")
			f.Data.DataTable.RemoveColumn("logDT", "AS_Customer_Exp")
			f.Data.DataTable.RemoveColumn("logDT", "AS_Customer_FULL")
			f.Intrinsic.Control.If(v.Local.sName.UCase, =, "CVSPB")
				f.Data.DataTable.RemoveColumn("logDT", "Salesman_No")
			f.Intrinsic.Control.EndIf
			f.Data.DataTable.RemoveColumn("logDT", "Terms")
			
			f.Data.DataView.Create("logDT", "logDV", 22)
			f.Data.DataView.ToString("logDT", "logDV", v.Local.sFieldTitles, ",", v.Ambient.NewLine, v.Local.sLogTexts)
			f.Data.DataView.Close("logDT", "logDV")
			f.Data.DataTable.Close("logDT")
		f.Intrinsic.Control.EndIf		
		
		f.Intrinsic.Control.If(v.Local.sLogTexts.Trim, <>, "")
		f.Intrinsic.Control.AndIf(v.Local.sLogTexts.Trim, <>, ",,,,,,,,,,,,,,,,,,,,,,,,")
			f.Intrinsic.String.Build("{0}\{1}_{2}_{3}.csv", v.Global.sLogsPath, v.Local.sName, v.Local.iCnt, v.Ambient.Date.PervasiveDate, v.Local.sFilePathLog)
			f.Intrinsic.File.String2File(v.Local.sFilePathLog, v.Local.sLogTexts)
		f.Intrinsic.Control.EndIf
		
		f.Data.DataTable.FillFromDictionary("dataImportDT", "dictionaryAR", "Invoice_Number", "InvoiceOpenAR")
		f.Data.DataView.SetFilter("dataImportDT", "dataImportEmptyDV", "InvoiceOpenAR = 'Y'")
		'Log Existing Invoices 
		'f.Data.DataView.Create("dataImportDT", "dataImportEmptyDV", 22, "AS_Customer_FULL = '*BLANK*'", "")		
		
		f.Intrinsic.Control.If(v.DataView.dataImportDT!dataImportEmptyDV.RowCount, >, 0)

		
			'f.Data.DataView.ToString("dataImportDT", "dataImportEmptyDV", v.Local.sFieldTitles, ",", v.Ambient.NewLine, v.Local.sLogTexts)
			f.Data.DataView.ToDataTable("dataImportDT", "dataImportEmptyDV", "logDT")
			f.Data.DataTable.RemoveColumn("logDT", "Name_Customer")
			f.Data.DataTable.RemoveColumn("logDT", "AS_Customer_Exp")
			f.Data.DataTable.RemoveColumn("logDT", "AS_Customer_FULL")
			f.Data.DataTable.RemoveColumn("logDT", "InvoiceOpenAR")
			f.Intrinsic.Control.If(v.Local.sName.UCase, =, "CVSPB")
				f.Data.DataTable.RemoveColumn("logDT", "Salesman_No")
			f.Intrinsic.Control.EndIf
			f.Data.DataTable.RemoveColumn("logDT", "Terms")
			
			f.Data.DataView.Create("logDT", "logDV", 22)
			f.Data.DataView.ToString("logDT", "logDV", v.Local.sFieldTitles, ",", v.Ambient.NewLine, v.Local.sLogTexts)
			f.Data.DataView.Close("logDT", "logDV")
			f.Data.DataTable.Close("logDT")
		f.Intrinsic.Control.EndIf		
		
		f.Intrinsic.Control.If(v.Local.sLogTexts.Trim, <>, "")
		f.Intrinsic.Control.AndIf(v.Local.sLogTexts.Trim, <>, ",,,,,,,,,,,,,,,,,,,,,,,,")
			f.Intrinsic.String.Build("{0}\{1}_{2}_{3}_ExistingInvoice.csv", v.Global.sLogsPath, v.Local.sName, v.Local.iCnt, v.Ambient.Date.PervasiveDate, v.Local.sFilePathLog)
			f.Intrinsic.File.String2File(v.Local.sFilePathLog, v.Local.sLogTexts)
		f.Intrinsic.Control.EndIf
		
		
		'Creates a table with only match customer.
		f.Data.DataView.Create("dataImportDT", "dataImportFullDV", 22, "AS_Customer_FULL <> '*BLANK*' and InvoiceOpenAR <> 'Y'", "")
		f.Data.DataView.ToDataTable("dataImportDT", "dataImportFullDV", "fullImportDT", true)
		f.Data.DataView.Create("termsDT", "termsDV", 22)
		
		f.Intrinsic.Control.If(v.Local.sName.UCase, =, "MWARDET")
			'Gets each row in the current datatable and creates rows for the upload file.
			v.Global.sGLAccountDebit.Set("01-01-01-110201")
			v.Global.sGLAccountCredit.Set("01-01-01-400101")
			f.Intrinsic.Control.CallSub(writeFixed_Files_UPLAROP_File)
		f.Intrinsic.Control.ElseIf(v.Local.sName.UCase, =, "CVSPB")
			v.Global.sGLAccountDebit.Set("01-01-01-110201")
			v.Global.sGLAccountCredit.Set("01-01-01-400103")
			'Gets each row in the current datatable and creates rows for the upload file.
			f.Intrinsic.Control.CallSub(writeFixed_Files_UPLAROP_File)
		f.Intrinsic.Control.EndIf
		
		f.Data.DataView.Close("termsDT", "termsDV")
		f.Data.DataTable.Close("fullImportDT")
		f.Data.DataView.Close("dataImportDT", "dataImportFullDV")
		f.Data.DataView.Close("dataImportDT", "dataImportEmptyDV")
		f.Data.DataTable.Close("dataImportDT")
	f.Intrinsic.Control.Next(v.Local.iCnt)
	
	f.Data.Dictionary.Close("termDueDaysDict")
	f.Data.DataTable.Close("termsDT")
	f.Data.Dictionary.Close("customerXref")
	f.Data.Dictionary.Close("customerNameDict")
	f.Data.Dictionary.Close("dictionaryAR")
	f.Intrinsic.Control.CallSub(deleteFiles)
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.readFixedFiles.End

Program.Sub.writeFixed_Files_UPLAROP_File.Start
v.Local.iCnt.Declare
v.Local.sBatchLineNumber.Declare
v.Local.fAmount.Declare
v.Local.sGLAccount1.Declare
v.Local.sGLAccount2.Declare
v.Local.sTransactionCode.Declare
v.Local.sCustomer.Declare
v.Local.sFilter.Declare
v.Local.iTerms.Declare
v.Local.dTempDate.Declare
v.Local.sInvoice.Declare
v.Local.sInvoiceDate.Declare
v.Local.sInvoiceDueDate.Declare
v.Local.sCurrentBatchNumber.Declare
v.Local.sSalesman.Declare
v.Local.sFilePathLog.Declare
v.Local.sFilePathUpLoad.Declare
v.Local.sName.Declare
v.Local.bExits.Declare
f.Intrinsic.Control.Try
	f.Intrinsic.Control.For(v.Local.iCnt, 0, v.DataTable.fullImportDT.RowCount--, 1)
		f.Intrinsic.Control.CallSub(getSingleBatchNumber)
		
		'Customer
		v.Local.sCustomer.Set(v.DataTable.dataImportDT(v.Local.iCnt).AS_Customer_FULL!FieldValTrim)
		'Invoice Number
		v.Local.sInvoice.Set(v.DataTable.dataImportDT(v.Local.iCnt).Invoice_Number!FieldValTrim)
		'Invoice Amount
		f.Intrinsic.Control.CallSub(addLeftField, passedLenght, 16, passedRow, v.Local.iCnt, passedField, "Invoice_Total")
		v.Local.fAmount.Set(v.Global.sText)
		f.Intrinsic.Control.If(v.Local.fAmount, >, 0)
			v.Local.sTransactionCode.Set("10")
			v.Local.sGLAccount1.Set(V.Global.sGLAccountDebit)
			v.Local.sGLAccount2.Set(V.Global.sGLAccountCredit)
			v.Local.sBatchLineNumber.Set("0001")
			v.Local.sCurrentBatchNumber.Set(v.Global.sSingleBatchNumber)
		f.Intrinsic.Control.Else
			v.Local.sTransactionCode.Set("12")
			v.Local.sGLAccount1.Set(V.Global.sGLAccountCredit)
			v.Local.sGLAccount2.Set(V.Global.sGLAccountDebit)
			v.Local.sBatchLineNumber.Set("0001")
			v.Local.sCurrentBatchNumber.Set(v.Global.sSingleBatchNumber)
		f.Intrinsic.Control.EndIf	
		'f.Intrinsic.Math.Abs(v.Local.fAmount, v.Local.fAmount)
		'Batch Number
		
		f.Intrinsic.String.LPad(v.Local.sBatchLineNumber, "0", 4, v.Local.sBatchLineNumber)
		'Invoice Date
		f.Intrinsic.Control.CallSub(addDateField, passedRow, v.Local.iCnt)
		v.Local.sInvoiceDate.Set(v.Global.sText)
		f.Intrinsic.Date.ConvertDString(v.Global.sText, "MMDDYY", v.Local.dTempDate)
		v.Global.sText.Set("")
		'Invoice Due Date
		v.Local.sCustomer.Set(v.DataTable.fullImportDT(v.Local.iCnt).AS_Customer_FULL!FieldValTrim)
		f.Intrinsic.String.Build("Customer = '{0}'", v.Local.sCustomer, v.Local.sFilter)
		f.Data.DataView.SetFilter("termsDT", "termsDV", v.Local.sFilter)	
		
		f.Intrinsic.Control.If(v.DataView.termsDT!termsDV.RowCount, =, 1)
			v.Local.iTerms.Set(v.DataView.termsDT!termsDV(0).Payment_terms!FieldVal)
		f.Intrinsic.Control.Else
			v.Local.iTerms.Set(0)
		f.Intrinsic.Control.EndIf
		
		f.Intrinsic.Date.DateAdd("D", v.Local.iTerms, v.Local.dTempDate, v.Local.dTempDate)
		v.Local.sInvoiceDueDate.Set(v.Local.dTempDate.String)
		f.Intrinsic.String.Format(v.Local.sInvoiceDueDate, "yyyymmdd", v.Local.sInvoiceDueDate)
		
		'Salesman
		v.Local.sSalesman.Set(v.DataTable.fullImportDT(v.Local.iCnt).Salesman_No!FieldVal)
		f.Intrinsic.String.Left(v.Local.sSalesman.Trim, 3, v.Local.sSalesman)
		f.Intrinsic.String.RPad(v.Local.sSalesman.Trim, " ", 3, v.Local.sSalesman)
		
		f.Intrinsic.Control.If(v.Local.fAmount, >, 0)
			f.Data.DataTable.AddRow("UPLAROP", "CustNum", v.Local.sCustomer, "InvNum", v.Local.sInvoice,"TransCode", v.Local.sTransactionCode, "BatchNum",  v.Global.sBatchNumber, "BatchLine", v.Local.sBatchLineNumber,"InvDate", v.Local.sInvoiceDate, "InvTotal", v.Local.fAmount, "GLAcct", v.Local.sGLAccount1, "InvAmt", v.Local.fAmount, "InvDueDate", v.Local.sInvoiceDueDate, "Salesman", v.Local.sSalesman)
			
			'add GL Account to GL LINE
			f.Intrinsic.Control.CallSub(writeFixed_UPLGDETL_File, passedCnt, v.Local.iCnt, passedGL, v.Local.sGLAccount1, passedTransType, v.Local.sTransactionCode, passedMult, 1, passedBatchNumber, v.Local.sCurrentBatchNumber)
			'add GL Account to GL LINE
			f.Intrinsic.Control.CallSub(writeFixed_UPLGDETL_File, passedCnt, v.Local.iCnt, passedGL, v.Local.sGLAccount2, passedTransType, v.Local.sTransactionCode, passedMult, -1, passedBatchNumber, v.Local.sCurrentBatchNumber)
		
		f.Intrinsic.Control.Else
			f.Data.DataTable.AddRow("UPLAROP", "CustNum", v.Local.sCustomer, "InvNum", v.Local.sInvoice,"TransCode", v.Local.sTransactionCode, "BatchNum",  v.Global.sBatchNumberCredit, "BatchLine", v.Local.sBatchLineNumber,"InvDate", v.Local.sInvoiceDate, "InvTotal", v.Local.fAmount, "GLAcct", v.Local.sGLAccount1, "InvAmt", v.Local.fAmount, "InvDueDate", v.Local.sInvoiceDueDate, "Salesman", v.Local.sSalesman)
			
			'add GL Account to GL LINE
			f.Intrinsic.Control.CallSub(writeFixed_UPLGDETL_File, passedCnt, v.Local.iCnt, passedGL, v.Local.sGLAccount1, passedTransType, v.Local.sTransactionCode, passedMult, -1, passedBatchNumber, v.Local.sCurrentBatchNumber)
			'add GL Account to GL LINE
			f.Intrinsic.Control.CallSub(writeFixed_UPLGDETL_File, passedCnt, v.Local.iCnt, passedGL, v.Local.sGLAccount2, passedTransType, v.Local.sTransactionCode, passedMult, 1, passedBatchNumber, v.Local.sCurrentBatchNumber)
			
		f.Intrinsic.Control.EndIf
		
		f.Intrinsic.Control.CallSub(UPLAROPSync)
		
		f.Data.DataTable.DeleteRow("UPLAROP")
		f.Data.DataTable.AcceptChanges("UPLAROP")
'		f.Data.DataTable.Merge("CreditDT", "UPLAROP", false, 2)
'		f.Data.DataTable.DeleteRow("CreditDT")
'		f.Data.DataTable.AcceptChanges("CreditDT")
		
'		f.Intrinsic.Control.If(v.DataTable.UPLAROP.RowCount, >, 0)
'			f.Intrinsic.Control.CallSub(UPLAROPSync)
'		f.Intrinsic.Control.EndIf
		
		'Creates file path fot one shot project General Ledger Detail Master
		f.Intrinsic.String.Build("{0}\GLDETAIL.TXT", v.Caller.FilesDir, v.Local.sFilePathUpLoad)
		f.Intrinsic.File.String2File(v.Local.sFilePathUpLoad, v.Global.sGL_Lines)
		'f.Intrinsic.File.String2File("C:\Apps\Global\CUSTOM\GCG_5536\Test.txt", v.Global.sLines)
	
		'checks if file exists, and if does call the one shot program.
		f.Intrinsic.File.Exists( v.Local.sFilePathUpLoad, v.Local.bExits)
		f.Intrinsic.Control.If(v.Local.bExits)
			f.Global.General.CallWrapperSync(50, "UPLGDETL/U")
			'f.Global.General.CallWrapperSync(50, "UPLGDETL/A")
		f.Intrinsic.Control.EndIf		

'		f.Intrinsic.Control.If(v.Local.fAmount, >, 0)
'			f.Intrinsic.Math.Add(v.Global.iBatchLineNumber, 1, v.Global.iBatchLineNumber)
'		f.Intrinsic.Control.Else
'			f.Intrinsic.Math.Add(v.Global.iBatchLineNumberCredit, 1, v.Global.iBatchLineNumberCredit)
'		f.Intrinsic.Control.EndIf
		
	f.Intrinsic.Control.Next(v.Local.iCnt)	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.writeFixed_Files_UPLAROP_File.End

Program.Sub.writeFixed_UPLGDETL_File.Start
v.Local.sLine.Declare
v.Local.iCnt.Declare
v.Local.sTemp.Declare
v.Local.sBatch.Declare
v.Local.sBatchNumber.Declare
v.Local.sEmpty.Declare
v.Local.sGL_Account.Declare
v.Local.sPostDate.Declare
v.Local.iTerms.Declare
v.Local.dTempDate.Declare(Date,)
v.Local.sCustomer.Declare
v.Local.sFilter.Declare
v.Local.sTransactionType.Declare
v.Local.bDateError.Declare
v.Local.fAmount.Declare
f.Intrinsic.Control.Try	
	f.Intrinsic.String.Split(v.Ambient.Date.PervasiveDate, "-", v.Local.sTemp)
	f.Intrinsic.String.Join(v.Local.sTemp, , v.Local.sPostDate)
	
	f.Intrinsic.Control.CallSub(addFullDateField, passedRow, v.Local.iCnt)
	v.Local.sPostDate.Set(v.Global.sText)
	v.Global.sText.Set("")
	
	v.Local.sGL_Account.Set(v.Args.passedGL)
	v.Local.sTransactionType.Set(v.Args.passedTransType)
	

	v.Local.iCnt.Set(v.Args.passedCnt)
	
	v.Local.iTerms.Set(v.DataTable.dataImportDT(v.Local.iCnt).Terms!FieldValTrim)
	
	'GL Account
	f.Intrinsic.String.RPad(V.Local.sGL_Account, " ", 15, v.Local.sEmpty)
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Local.sEmpty, v.Local.sLine)
	v.Local.sEmpty.Set("")
	'Post Date 
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Local.sPostDate, v.Local.sLine)
	'Transaction Batch Number
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Args.passedBatchNumber, v.Local.sLine)
	'Transaction Batch Number
	f.Intrinsic.String.RPad(v.Local.sEmpty, " ", 5, v.Local.sEmpty)
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Local.sEmpty, v.Local.sLine)
	v.Local.sEmpty.Set("")
	'Transaction Voucher Number
	f.Intrinsic.String.RPad(v.Local.sEmpty, " ", 7, v.Local.sEmpty)
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Local.sEmpty, v.Local.sLine)
	v.Local.sEmpty.Set("")
	'Reference
	f.Intrinsic.Control.CallSub(addField, passedLenght, 15, passedRow, v.Local.iCnt, passedField, "Invoice_Number")
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Global.sText, v.Local.sLine)
	v.Global.sText.Set("")
	'Amount
	f.Intrinsic.Control.CallSub(addLeftField, passedLenght, 16, passedRow, v.Local.iCnt, passedField, "Invoice_Total")
	v.Local.fAmount.Set(v.Global.sText.trim)
	f.Intrinsic.Math.Mult(v.Local.fAmount, v.Args.passedMult, v.Local.fAmount)
	f.Intrinsic.String.LPad(v.Local.fAmount.String, " ", 16, v.Global.sText)
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Global.sText, v.Local.sLine)
	v.Global.sText.Set("")
	'Description  
	f.Intrinsic.Control.CallSub(addField, passedLenght, 30, passedRow, v.Local.iCnt, passedField, "Name_Customer")
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Global.sText, v.Local.sLine)
	v.Global.sText.Set("")
	'Application Type
	f.Intrinsic.String.RPad(v.Local.sEmpty, " ", 2, v.Local.sEmpty)
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Local.sEmpty, v.Local.sLine)
	v.Local.sEmpty.Set("")
	'Transaction Type
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Local.sTransactionType, v.Local.sLine)
	v.Local.sEmpty.Set("")
	'Customer ID
'************************************************************************************************Needs Attention: Check if it is customer Number,		
	f.Intrinsic.Control.CallSub(addLeftField, passedLenght, 7, passedRow, v.Local.iCnt, passedField, "AS_Customer_FULL")
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Global.sText, v.Local.sLine)
	v.Global.sText.Set("")
	'Vendor ID
	f.Intrinsic.String.RPad(v.Local.sEmpty, " ", 7, v.Local.sEmpty)
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Local.sEmpty, v.Local.sLine)
	v.Local.sEmpty.Set("")
	'PO Number
	f.Intrinsic.String.RPad(v.Local.sEmpty, " ", 7, v.Local.sEmpty)
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Local.sEmpty, v.Local.sLine)
	v.Local.sEmpty.Set("")
	'Invoice Number
	f.Intrinsic.String.RPad(v.Local.sEmpty, " ", 15, v.Local.sEmpty)
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Local.sEmpty, v.Local.sLine)
	v.Local.sEmpty.Set("")

	'Invoice Date.
''	f.Intrinsic.Control.If(v.Local.iCnt, =, 489)
''	f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.CallSub(addFullDateField, passedRow, v.Local.iCnt)
	f.Intrinsic.Control.If(v.Global.sText, =, "19000101")
		v.Local.bDateError.Set(true)	
	f.Intrinsic.Control.EndIf
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Global.sText, v.Local.sLine)
	f.Intrinsic.Date.ConvertDString(v.Global.sText, "YYYY/MM/DD", v.Local.dTempDate)
	v.Global.sText.Set("")
	
	'Invoice Due Date
	v.Local.sCustomer.Set(v.DataTable.fullImportDT(v.Local.iCnt).AS_Customer_FULL!FieldValTrim)
	f.Intrinsic.String.Build("Customer = '{0}'", v.Local.sCustomer, v.Local.sFilter)
	f.Data.DataView.SetFilter("termsDT", "termsDV", v.Local.sFilter)	
	
	f.Intrinsic.Control.If(v.DataView.termsDT!termsDV.RowCount, =, 1)
		v.Local.iTerms.Set(v.DataView.termsDT!termsDV(0).Payment_terms!FieldVal)
	f.Intrinsic.Control.Else
		v.Local.iTerms.Set(0)
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Date.DateAdd("D", v.Local.iTerms, v.Local.dTempDate, v.Local.dTempDate)
	f.Intrinsic.String.Replace(v.Local.dTempDate.PervasiveDate, "-", "", v.Global.sText)
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine,  v.Global.sText, v.Local.sLine)
	v.Global.sText.Set("")
	'Check System
	f.Intrinsic.String.RPad(v.Local.sEmpty, " ", 2, v.Local.sEmpty)
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Local.sEmpty, v.Local.sLine)
	v.Local.sEmpty.Set("")
	'Check Number
	f.Intrinsic.String.RPad(v.Local.sEmpty, " ", 6, v.Local.sEmpty)
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Local.sEmpty, v.Local.sLine)
	v.Local.sEmpty.Set("")
	'Check Date
	f.Intrinsic.String.RPad(v.Local.sEmpty, " ", 8, v.Local.sEmpty)
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Local.sEmpty, v.Local.sLine)
	v.Local.sEmpty.Set("")
	'Check Gross Amount
	f.Intrinsic.String.RPad(v.Local.sEmpty, " ", 16, v.Local.sEmpty)
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Local.sEmpty, v.Local.sLine)
	v.Local.sEmpty.Set("")
	'Check Discount Amount
	f.Intrinsic.String.RPad(v.Local.sEmpty, " ", 11, v.Local.sEmpty)
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Local.sEmpty, v.Local.sLine)
	v.Local.sEmpty.Set("")
	'Check Net Amount
	f.Intrinsic.String.RPad(v.Local.sEmpty, " ", 16, v.Local.sEmpty)
	f.Intrinsic.String.Build("{0}{1}", v.Local.sLine, v.Local.sEmpty, v.Local.sLine)
	v.Local.sEmpty.Set("")		
	
	f.Intrinsic.Control.If(v.Local.bDateError)
		f.Intrinsic.Control.If(v.Global.sDateErrorLines, =, "")
			v.Global.sDateErrorLines.Set(v.Local.sLine)
		f.Intrinsic.Control.Else
			f.Intrinsic.String.Build("{0}{1}{2}", v.Global.sGL_Lines, v.Ambient.NewLine, v.Local.sLine, v.Global.sDateErrorLines)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Else
		f.Intrinsic.Control.If(v.Global.sGL_Lines, =, "")
			v.Global.sGL_Lines.Set(v.Local.sLine)
		f.Intrinsic.Control.Else
			f.Intrinsic.String.Build("{0}{1}{2}", v.Global.sGL_Lines, v.Ambient.NewLine, v.Local.sLine, v.Global.sGL_Lines)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.writeFixed_UPLGDETL_File.End

Program.Sub.getSingleBatchNumber.Start
v.Local.sBatch.Declare
v.Local.sTemp.Declare
v.Local.iNumber.Declare
v.Local.sChar.Declare
v.Local.sSQL.Declare
f.Intrinsic.Control.Try

	f.ODBC.Connection!con.OpenCompanyConnection
		f.ODBC.Connection!con.ExecuteAndReturn("select MAX(GCG_AR_BATCH) as BATCH from GCG_5536_AR_BATCH", v.Local.sBatch)
	f.ODBC.Connection!con.Close
	
	f.Intrinsic.Control.If(v.Local.sBatch, =, "M9999")
		f.Intrinsic.UI.Msgbox("You Have reached the max number of Batches, Please Contact Global Shop.")
		f.Intrinsic.Control.End
	f.Intrinsic.Control.EndIf
	
	
	f.Intrinsic.Control.If(v.Local.sBatch.Trim, =, "")
		 f.ODBC.Connection!con.OpenCompanyConnection
			f.Intrinsic.String.Build("Insert into  GCG_5536_AR_BATCH (GCG_AR_BATCH, GSS_USER, CREATED_ON) Values ('M0001', '{0}', '{1}')", v.Caller.User, v.Ambient.Date.PervasiveDate, v.Local.sSQL.Declare)
			f.ODBC.Connection!con.Execute(v.Local.sSQL.Declare)
		f.ODBC.Connection!con.Close
		
		v.Global.sSingleBatchNumber.Set("M0001")
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Right(v.Local.sBatch.Trim, 4, v.Local.sTemp)
		f.Intrinsic.String.Left(v.Local.sBatch.Trim, 1, v.Local.sChar)
		f.Intrinsic.Control.If(v.Local.sTemp.IsNumeric)
			v.Local.iNumber.Set(v.Local.sTemp)
			f.Intrinsic.Math.Add(v.Local.iNumber, 1, v.Local.iNumber)
			f.Intrinsic.String.LPad(v.Local.iNumber, "0", 4, v.Local.sTemp)
			f.Intrinsic.String.Build("{0}{1}", v.Local.sChar, v.Local.sTemp, v.Global.sSingleBatchNumber)
						
			f.ODBC.Connection!con.OpenCompanyConnection
				f.Intrinsic.String.Build("Insert into  GCG_5536_AR_BATCH (GCG_AR_BATCH, GSS_USER, CREATED_ON) Values ('{0}', '{1}', '{2}')", v.Global.sSingleBatchNumber, v.Caller.User, v.Ambient.Date.PervasiveDate, v.Local.sSQL.Declare)
				f.ODBC.Connection!con.Execute(v.Local.sSQL.Declare)
			f.ODBC.Connection!con.Close
		
		f.Intrinsic.Control.Else
			f.Intrinsic.UI.Msgbox("No Batch Found")
			f.Intrinsic.Control.End
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.Global.sBatchNumber, = "M9999")
		f.Intrinsic.UI.Msgbox("You Have reached the max number of Batches, Please Contact Global Shop.")
		f.Intrinsic.Control.End
	f.Intrinsic.Control.EndIf
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.getSingleBatchNumber.End

